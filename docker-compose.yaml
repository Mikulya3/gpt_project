services:


  db:
    image: postgres:16
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gpt-fastapi
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      CELERY_BROKER_URL: ${REDIS_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_BACKEND_URL}
    ports:
      - "8000:8000"
    networks:
      - monitoring

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      CELERY_BROKER_URL: ${REDIS_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_BACKEND_URL}
    command: celery -A app.celery_app.celery_app worker --loglevel=info -Q default
    networks:
      - monitoring



  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
    ports: ["9090:9090"]
    restart: unless-stopped
 

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    ports: ["3000:3000"]
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  postgres_data:

networks:
  monitoring:
    driver: bridge
